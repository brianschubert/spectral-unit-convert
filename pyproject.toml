[tool.poetry]
name = "spectral-unit-convert"
version = "0.1.0-dev"
description = ""
authors = ["Brian Schubert <schubert.b@northeastern.edu>"]
readme = "README.md"
packages = [
    { from = "src", include = "spectral_unit_convert" },
]

[tool.poetry.dependencies]
python = "^3.9"
pytest = "^8.3.2"

[tool.poetry.group.dev.dependencies]
typing-extensions = "^4.12.2"
ruff = "^0.6.2"
mypy = "^1.11.2"
pytest = "^8.3.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# pytest config.
[tool.pytest.ini_options]
addopts = "--doctest-modules"
testpaths = ["src", "tests"]

# mypy config.
[tool.mypy]
strict = true
files = ["src"]

# ruff config.
[tool.ruff]
line-length = 88  # match black
target-version = "py39"
fix = true
src = ["src"]

# ruff lint settings.
[tool.ruff.lint]
# Select active lint rules.
# https://docs.astral.sh/ruff/rules/
select = [
    "F", # pyflakes
    "E", "W", # pycodestyle
    "I", # isort
    "N", # pep8-naming
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "BLE", # flake-8-blind-except
    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PL", # pylint
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
]

unfixable = [
    # Unused noqa
    "RUF100",
    # Unused import
    "F401",
]
